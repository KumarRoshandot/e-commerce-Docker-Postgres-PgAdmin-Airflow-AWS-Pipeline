-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.tb_d_item_inventory;

CREATE TABLE IF NOT EXISTS public.tb_d_item_inventory
(
    tb_d_item_inventory_id integer NOT NULL DEFAULT nextval('tb_d_item_inventory_tb_d_item_inventory_id_seq'::regclass),
    inventory_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    created_date date NOT NULL,
    modified_date date NOT NULL,
    deleted_date date,
    CONSTRAINT tb_d_item_inventory_pkey PRIMARY KEY (inventory_id)
);

DROP TABLE IF EXISTS public.tb_d_items;

CREATE TABLE IF NOT EXISTS public.tb_d_items
(
    tb_d_items_id integer NOT NULL DEFAULT nextval('tb_d_items_tb_d_items_id_seq'::regclass),
    item_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    sku character varying(100) COLLATE pg_catalog."default",
    inventory_id character varying(100) COLLATE pg_catalog."default",
    manufacture_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_price numeric(10, 2) NOT NULL,
    item_weight numeric(10, 2) NOT NULL,
    created_date date NOT NULL,
    modified_date date NOT NULL,
    deleted_date date,
    CONSTRAINT tb_d_items_pkey PRIMARY KEY (item_id)
);

DROP TABLE IF EXISTS public.tb_d_manufacture;

CREATE TABLE IF NOT EXISTS public.tb_d_manufacture
(
    tb_d_manufacture_id integer NOT NULL DEFAULT nextval('tb_d_manufacture_tb_d_manufacture_id_seq'::regclass),
    manufacture_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    manufacture_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    active_ind boolean DEFAULT true,
    etl_date date NOT NULL DEFAULT CURRENT_DATE,
    CONSTRAINT tb_d_manufacture_pkey PRIMARY KEY (manufacture_id)
);

DROP TABLE IF EXISTS public.tb_d_payment_details;

CREATE TABLE IF NOT EXISTS public.tb_d_payment_details
(
    tb_d_payment_details_id integer NOT NULL DEFAULT nextval('tb_d_payment_details_tb_d_payment_details_id_seq'::regclass),
    payment_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    amount numeric(10, 2) NOT NULL,
    provider character varying(100) COLLATE pg_catalog."default" NOT NULL,
    status character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_date date NOT NULL,
    modified_date date NOT NULL,
    CONSTRAINT tb_d_payment_details_pkey PRIMARY KEY (payment_id)
);

DROP TABLE IF EXISTS public.tb_d_user_address;

CREATE TABLE IF NOT EXISTS public.tb_d_user_address
(
    tb_d_user_address_id integer NOT NULL DEFAULT nextval('tb_d_user_address_tb_d_user_address_id_seq'::regclass),
    membership_id character varying(100) COLLATE pg_catalog."default",
    address_line1 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    address_line2 character varying(100) COLLATE pg_catalog."default" NOT NULL,
    city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(8) COLLATE pg_catalog."default" NOT NULL,
    mobile_no integer,
    created_date date NOT NULL,
    modified_date date NOT NULL
);

DROP TABLE IF EXISTS public.tb_d_user_applications;

CREATE TABLE IF NOT EXISTS public.tb_d_user_applications
(
    tb_d_user_applications_id integer NOT NULL DEFAULT nextval('tb_d_user_applications_tb_d_user_applications_id_seq'::regclass),
    membership_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    birthday character varying(8) COLLATE pg_catalog."default" NOT NULL,
    mobile_no integer,
    above_18 boolean NOT NULL,
    etl_date date NOT NULL DEFAULT CURRENT_DATE,
    CONSTRAINT tb_d_user_applications_pkey PRIMARY KEY (membership_id)
);

COMMENT ON COLUMN public.tb_d_user_applications.membership_id
    IS 'The <last_name>_<hash(YYYYMMDD)>(truncated to first 5 digits of hash)';

COMMENT ON COLUMN public.tb_d_user_applications.first_name
    IS 'First name of Member';

COMMENT ON COLUMN public.tb_d_user_applications.last_name
    IS 'Last name of Member';

COMMENT ON COLUMN public.tb_d_user_applications.email
    IS 'Email of Member';

COMMENT ON COLUMN public.tb_d_user_applications.birthday
    IS 'Birthday of Member in YYYYMMDD format';

COMMENT ON COLUMN public.tb_d_user_applications.mobile_no
    IS 'Mobile no. of Member';

COMMENT ON COLUMN public.tb_d_user_applications.above_18
    IS 'Applicant is over 18 years old as of 1 Jan 2022 or not';

DROP TABLE IF EXISTS public.tb_f_sales_transactions;

CREATE TABLE IF NOT EXISTS public.tb_f_sales_transactions
(
    tb_f_sales_transactions_id integer NOT NULL DEFAULT nextval('tb_f_sales_transactions_tb_f_sales_transactions_id_seq'::regclass),
    membership_id character varying(100) COLLATE pg_catalog."default",
    order_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    payment_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_id character varying(100) COLLATE pg_catalog."default" NOT NULL,
    quantity integer COLLATE pg_catalog."default" NOT NULL,
    item_total_price numeric(10, 2) NOT NULL,
    item_total_weight numeric(10, 2) NOT NULL,
    date_of_txn date NOT NULL,
    etl_date date NOT NULL DEFAULT CURRENT_DATE
);

COMMENT ON COLUMN public.tb_f_sales_transactions.membership_id
    IS 'Foreign Key Rerferencing Primarky key of tb_d_user_applications.membership_id';

COMMENT ON COLUMN public.tb_f_sales_transactions.order_id
    IS 'ORDER ID assigned on a purchse';

COMMENT ON COLUMN public.tb_f_sales_transactions.item_id
    IS 'Actual Item line id , indivual product which got purchased';

COMMENT ON COLUMN public.tb_f_sales_transactions.quantity
    IS 'Quantity for an each item_line_id';

COMMENT ON COLUMN public.tb_f_sales_transactions.item_total_price
    IS 'total Price of each item_line_id ';

COMMENT ON COLUMN public.tb_f_sales_transactions.item_total_weight
    IS 'total weigth of each item_line_id';

COMMENT ON COLUMN public.tb_f_sales_transactions.date_of_txn
    IS 'Date of Purchase';

COMMENT ON COLUMN public.tb_f_sales_transactions.etl_date
    IS 'Date on Which Data was loaded';

ALTER TABLE IF EXISTS public.tb_d_items
    ADD CONSTRAINT tb_d_items_inventory_id_fkey FOREIGN KEY (inventory_id)
    REFERENCES public.tb_d_item_inventory (inventory_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tb_d_items
    ADD CONSTRAINT tb_d_items_manufacture_id_fkey FOREIGN KEY (manufacture_id)
    REFERENCES public.tb_d_manufacture (manufacture_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tb_d_user_address
    ADD CONSTRAINT tb_d_user_address_membership_id_fkey FOREIGN KEY (membership_id)
    REFERENCES public.tb_d_user_applications (membership_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tb_f_sales_transactions
    ADD CONSTRAINT tb_f_sales_transactions_item_id_fkey FOREIGN KEY (item_id)
    REFERENCES public.tb_d_items (item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tb_f_sales_transactions
    ADD CONSTRAINT tb_f_sales_transactions_membership_id_fkey FOREIGN KEY (membership_id)
    REFERENCES public.tb_d_user_applications (membership_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.tb_f_sales_transactions
    ADD CONSTRAINT tb_f_sales_transactions_payment_id_fkey FOREIGN KEY (payment_id)
    REFERENCES public.tb_d_payment_details (payment_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;